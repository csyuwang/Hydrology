var Viewport = function (editor) {    var signals = editor.signals;    var gridHelper = editor.gridHelper;    var status = editor.systemStatus;    var style = Config.Style;    // UI    var container = new EditorUI.Panel();    var canvasStyle = Config.Canvas.Style;    // 网格画布    var gridsCanvas = new EditorUI.Canvas(canvasStyle.width,canvasStyle.height);    gridsCanvas.setBackgroundColor(canvasStyle.backgroundColor);    gridsCanvas.setPosition(canvasStyle.top,canvasStyle.left);    container.add(gridsCanvas);    // 辅助画布    var canvasHelper = new EditorUI.Canvas(canvasStyle.width,canvasStyle.height);    canvasHelper.setPosition(canvasStyle.top,canvasStyle.left);    //canvasHelper.onMouseOut(canvasHelper.clear);    container.add(canvasHelper);    function resetViewCanvasHelper() {        canvasHelper.clear();        canvasHelper.unbind('mouseMove',onMouseMoveForView);        canvasHelper.unbind('click',onClickCanvasHelperForView);    }    function setupViewCanvasHelper(){        canvasHelper.unbind('mouseMove',onMouseMoveForView).bind('mouseMove',onMouseMoveForView);        canvasHelper.unbind('click',onClickCanvasHelperForView).bind('click',onClickCanvasHelperForView);    }    function resetGridCanvasHelper() {        canvasHelper.clear();        canvasHelper.unbind('mouseMove',onMouseMoveForGrid);        canvasHelper.unbind('click',onClickCanvasHelperForGrid);    }    function setupGridCanvasHelper(){        canvasHelper.unbind('mouseMove',onMouseMoveForGrid).bind('mouseMove',onMouseMoveForGrid);        canvasHelper.unbind('click',onClickCanvasHelperForGrid).bind('click',onClickCanvasHelperForGrid);    }    // 选择视图 鼠标在canvasHelper上移动时标记所选层，或行，或列    function onMouseMoveForView(e) {        if(status.viewType == SystemStatus.ViewType.LAYER) {            var xIndex = gridHelper.getNormalXCoordinateIndex(gridHelper.canvas2GridScaleX(e.offsetX,gridHelper.X_MAX));            var yIndex = gridHelper.getNormalYCoordinateIndex(gridHelper.canvas2GridScaleY(e.offsetY,gridHelper.Y_MAX));            if(status.selectedViewButton == SystemStatus.ViewType.ROW) {                gridHelper.markRow(canvasHelper,xIndex,yIndex,"#ff0000");            }            else if (status.selectedViewButton == SystemStatus.ViewType.COLUMN){                gridHelper.markColumn(canvasHelper,xIndex,yIndex,"#ff0000");            }        }        else if(status.viewType == SystemStatus.ViewType.ROW) {        }        else if(status.viewType == SystemStatus.ViewType.COLUMN) {        }    }    // 点击某一层或行或列    function onClickCanvasHelperForView(e) {        if(status.viewType == SystemStatus.ViewType.LAYER) {            if(status.selectedViewButton == SystemStatus.ViewType.ROW) {                status.row = gridHelper.getNormalYCoordinateIndex(gridHelper.canvas2GridScaleY(e.offsetY,gridHelper.Y_MAX))+1;                status.viewType = SystemStatus.ViewType.ROW;                signals.rowChanged.dispatch(status.row);                resetViewCanvasHelper();            }            else if (status.selectedViewButton == SystemStatus.ViewType.COLUMN){                status.column = gridHelper.getNormalXCoordinateIndex(gridHelper.canvas2GridScaleX(e.offsetX,gridHelper.X_MAX))+1;                status.viewType = SystemStatus.ViewType.COLUMN;                signals.columnChanged.dispatch(status.column);                resetViewCanvasHelper();            }        }        else if(status.viewType == SystemStatus.ViewType.ROW) {        }        else if(status.viewType == SystemStatus.ViewType.COLUMN) {        }    }    // 编辑网格    function onMouseMoveForGrid(e) {        if(status.viewType == SystemStatus.ViewType.LAYER) {            var x = gridHelper.canvas2GridScaleX(e.offsetX,gridHelper.X_MAX);            var y = gridHelper.canvas2GridScaleY(e.offsetY,gridHelper.Y_MAX);            if(status.selectedDrawType == SystemStatus.DrawType.ADDROWLINE) {                gridHelper.markRowLine(canvasHelper,y,style.markColor,true);            }            else if (status.selectedDrawType == SystemStatus.DrawType.ADDCOLUMNLINE){                gridHelper.markColumnLine(canvasHelper,x,style.markColor,true);            }            else if (status.selectedDrawType == SystemStatus.DrawType.DELETEROWLINE){                var yIndex = gridHelper.getNormalYCoordinateIndex(y);                if (y - gridHelper.xCoordinates[yIndex] < gridHelper.threehold) {                    y = gridHelper.xCoordinates[yIndex];                    gridHelper.markRowLine(canvasHelper, y, style.markColor,true);                }                else if (gridHelper.xCoordinates[yIndex + 1] - y < gridHelper.threehold) {                    y = gridHelper.xCoordinates[yIndex + 1];                    gridHelper.markRowLine(canvasHelper, y, style.markColor,true);                }            }            else if (status.selectedDrawType == SystemStatus.DrawType.DELETECOLUMNLINE){                var xIndex = gridHelper.getNormalXCoordinateIndex(x);                if (x - gridHelper.xCoordinates[xIndex] < gridHelper.threehold) {                    x = gridHelper.xCoordinates[xIndex];                    gridHelper.markColumnLine(canvasHelper, x, style.markColor,true);                }                else if (gridHelper.xCoordinates[xIndex + 1] - x < gridHelper.threehold) {                    x = gridHelper.xCoordinates[xIndex + 1];                    gridHelper.markColumnLine(canvasHelper, x, style.markColor,true);                }            }        }        else if(status.viewType == SystemStatus.ViewType.ROW) {        }        else if(status.viewType == SystemStatus.ViewType.COLUMN) {        }    }    function onClickCanvasHelperForGrid(e) {        // 加线，删线在网格画布上操作        // 1. 线的标记        // 2. 对应的数据结构改变        // 3. 记录所加或所删的线的信息 （保存时post到后台）        if(status.viewType == SystemStatus.ViewType.LAYER) {            var x = gridHelper.canvas2GridScaleX(e.offsetX,gridHelper.X_MAX);            var y = gridHelper.canvas2GridScaleY(e.offsetY,gridHelper.Y_MAX);            if(status.selectedDrawType == SystemStatus.DrawType.ADDROWLINE) {                gridHelper.markRowLine(gridsCanvas,y,style.defaultColor);            }            else if (status.selectedDrawType == SystemStatus.DrawType.ADDCOLUMNLINE){                gridHelper.markColumnLine(gridsCanvas,x,style.defaultColor);            }            else if (status.selectedDrawType == SystemStatus.DrawType.DELETEROWLINE){                var yIndex = gridHelper.getNormalYCoordinateIndex(y);                if (y - gridHelper.xCoordinates[yIndex] < gridHelper.threehold) {                    y = gridHelper.xCoordinates[yIndex];                    gridHelper.markRowLine(gridsCanvas, y, canvasStyle.backgroundColor);                }                else if (gridHelper.xCoordinates[yIndex + 1] - y < gridHelper.threehold) {                    y = gridHelper.xCoordinates[yIndex + 1];                    gridHelper.markRowLine(gridsCanvas, y, canvasStyle.backgroundColor);                }            }            else if (status.selectedDrawType == SystemStatus.DrawType.DELETECOLUMNLINE){                var xIndex = gridHelper.getNormalXCoordinateIndex(x);                if (x - gridHelper.xCoordinates[xIndex] < gridHelper.threehold) {                    x = gridHelper.xCoordinates[xIndex];                    gridHelper.markColumnLine(gridsCanvas, x, canvasStyle.backgroundColor);                }                else if (gridHelper.xCoordinates[xIndex + 1] - x < gridHelper.threehold) {                    x = gridHelper.xCoordinates[xIndex + 1];                    gridHelper.markColumnLine(gridsCanvas, x, canvasStyle.backgroundColor);                }            }        }        else if(status.viewType == SystemStatus.ViewType.ROW) {        }        else if(status.viewType == SystemStatus.ViewType.COLUMN) {        }    }    // handle signals    // 窗口改变重新设置画布大小    signals.windowResize.add( function () {        gridsCanvas.setSize(window.innerHeight - 64,window.innerHeight - 64);        canvasHelper.setSize(window.innerHeight - 64,window.innerHeight - 64);        gridHelper.canvasWidth = gridsCanvas.getOffsetWidth() - 1;        gridHelper.canvasHeight = gridsCanvas.getOffsetHeight() - 1;        //gridHelper.drawXYCoordinateLines(gridsCanvas);    } );    // 项目初始化完成时    signals.projectInitialized.add(function (projectId) {        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getXYCoordinateLines.json',            data: { 'projectId': projectId },            dataType: 'json',            success: function (grid) {                gridHelper.xCoordinates = grid.xCoordinates;                gridHelper.yCoordinates = grid.yCoordinates;                //默认初始化XY方向网格                gridHelper.drawXYCoordinateLines(gridsCanvas);            }        });    });    // 层改变时画出XY方向所有Grids    signals.layerChanged.add(function () {        //alert(projectId+','+propertyType+','+layer);        gridHelper.drawXYCoordinateLines(gridsCanvas);        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getXYGrids.json',            data: { 'projectId': status.projectId,'propertyType': status.propertyType, 'layer':status.layer},            dataType: 'json',            success: function (grids) {                gridHelper.drawXYGrids(gridsCanvas,grids);            }        });    });    // 行改变时画出XZ方向所有Grids    signals.rowChanged.add(function (row) {        console.log(row);        // for test        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getXZGrids.json',            data: { 'projectId': status.projectId, 'row':row},            dataType: 'json',            success: function (grids) {                gridHelper.drawXZGrids(gridsCanvas,grids);            }        });    });    // 列改变时画出YZ方向所有Grids    signals.columnChanged.add(function (column) {        // for test        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getYZGrids.json',            data: { 'projectId': status.projectId, 'column':column},            dataType: 'json',            success: function (grids) {                gridHelper.drawYZGrids(gridsCanvas,grids);            }        });    });    // 物性改变时画网格    signals.propertyChanged.add(function () {        // 处理不同视角        if(status.viewType == SystemStatus.ViewType.LAYER) {            $.ajax({                type: 'GET',                contentType: 'application/json',                url: '../getdata/getXYGrids.json',                data: { 'projectId': status.projectId,'propertyType': status.propertyType, 'layer':status.layer},                dataType: 'json',                success: function (grids) {                    gridHelper.drawXYGrids(gridsCanvas,grids);                }            });        }else if (status.viewType == SystemStatus.ViewType.ROW){        }else if (status.viewType == SystemStatus.ViewType.COLUMN){        }    } );    // view    signals.viewLayer.add(function () {        if(status.viewType == SystemStatus.ViewType.LAYER) {            resetViewCanvasHelper();        }        else{            setupViewCanvasHelper();        }    });    signals.viewRow.add(function () {        if(status.viewType == SystemStatus.ViewType.ROW) {            resetViewCanvasHelper();        }else{            setupViewCanvasHelper();        }    });    signals.viewColumn.add(function () {        if(status.viewType == SystemStatus.ViewType.COLUMN) {            resetViewCanvasHelper();        }else{            setupViewCanvasHelper()        }    });    // edit lines and girds    signals.editGrid.add(function () {        setupGridCanvasHelper();    });    // 重置    signals.resetEditGrid.add(function () {        resetGridCanvasHelper();    });    return container;};