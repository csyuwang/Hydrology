var Viewport = function (editor) {    var signals = editor.signals;    var gridHelper = editor.gridHelper;    var status = editor.systemStatus;    // UI    var container = new EditorUI.Panel();    var canvasStyle = Config.Canvas.Style;    // 网格画布    var gridsCanvas = new EditorUI.Canvas(canvasStyle.width,canvasStyle.height);    gridsCanvas.setBackgroundColor(canvasStyle.backgroundColor);    gridsCanvas.setPosition(canvasStyle.top,canvasStyle.left);    container.add(gridsCanvas);    // 辅助画布    var canvasHelper = new EditorUI.Canvas(canvasStyle.width,canvasStyle.height);    canvasHelper.setPosition(canvasStyle.top,canvasStyle.left);    container.add(canvasHelper);    function resetCanvasHelper() {        canvasHelper.clear();        canvasHelper.unbind('mouseMove',onMouseMove);        canvasHelper.unbind('click',onClickCanvasHelper);    }    function setupCanvasHelper(){        canvasHelper.unbind('mouseMove',onMouseMove).bind('mouseMove',onMouseMove);        canvasHelper.unbind('click',onClickCanvasHelper).bind('click',onClickCanvasHelper);    }    // 鼠标在canvasHelper上移动时标记所选层，或行，或列    function onMouseMove(e) {        if(status.viewType == SystemStatus.ViewType.LAYER) {            var xIndex = gridHelper.getNormalXCoordinateIndex(gridHelper.canvas2GridScaleX(e.offsetX,gridHelper.X_MAX));            var yIndex = gridHelper.getNormalYCoordinateIndex(gridHelper.canvas2GridScaleY(e.offsetY,gridHelper.Y_MAX));            if(status.checkedViewButton == SystemStatus.ViewType.ROW) {                gridHelper.markRow(canvasHelper,xIndex,yIndex,"#ff0000");            }            else if (status.checkedViewButton == SystemStatus.ViewType.COLUMN){                gridHelper.markColumn(canvasHelper,xIndex,yIndex,"#ff0000");            }        }        else if(status.viewType == SystemStatus.ViewType.ROW) {        }        else if(status.viewType == SystemStatus.ViewType.COLUMN) {        }    }    // 点击某一层或行或列    function onClickCanvasHelper(e) {        if(status.viewType == SystemStatus.ViewType.LAYER) {            if(status.checkedViewButton == SystemStatus.ViewType.ROW) {                status.row = gridHelper.getNormalYCoordinateIndex(gridHelper.canvas2GridScaleY(e.offsetY,gridHelper.Y_MAX))+1;                status.viewType = SystemStatus.ViewType.ROW;                signals.rowChanged.dispatch(status.row);                resetCanvasHelper();            }            else if (status.checkedViewButton == SystemStatus.ViewType.COLUMN){                status.column = gridHelper.getNormalXCoordinateIndex(gridHelper.canvas2GridScaleX(e.offsetX,gridHelper.X_MAX))+1;                status.viewType = SystemStatus.ViewType.COLUMN;                signals.columnChanged.dispatch(status.column);                resetCanvasHelper();            }        }        else if(status.viewType == SystemStatus.ViewType.ROW) {        }        else if(status.viewType == SystemStatus.ViewType.COLUMN) {        }    }    // handle signals    // 窗口改变重新设置画布大小    signals.windowResize.add( function () {        gridsCanvas.setSize(window.innerHeight - 64,window.innerHeight - 64);        gridHelper.canvasWidth = gridsCanvas.getOffsetWidth() - 1;        gridHelper.canvasHeight = gridsCanvas.getOffsetHeight() - 1;        //gridHelper.drawXYCoordinateLines(gridsCanvas);    } );    // 项目初始化完成时    signals.projectInitialized.add(function (projectId) {        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getXYCoordinateLines.json',            data: { 'projectId': projectId },            dataType: 'json',            success: function (grid) {                gridHelper.xCoordinates = grid.xCoordinates;                gridHelper.yCoordinates = grid.yCoordinates;                //默认初始化XY方向网格                gridHelper.drawXYCoordinateLines(gridsCanvas);            }        });    });    // 层改变时画出XY方向所有Grids    signals.layerChanged.add(function (projectId,propertyType,layer) {        //alert(projectId+','+propertyType+','+layer);        gridHelper.drawXYCoordinateLines(gridsCanvas);        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getXYGrids.json',            data: { 'projectId': projectId,'propertyType': propertyType, 'layer':layer},            dataType: 'json',            success: function (grids) {                gridHelper.drawXYGrids(gridsCanvas,grids);            }        });    });    // 行改变时画出XZ方向所有Grids    signals.rowChanged.add(function (row) {        console.log(row);        // for test        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getXZGrids.json',            data: { 'projectId': status.projectId, 'row':row},            dataType: 'json',            success: function (grids) {                gridHelper.drawXZGrids(gridsCanvas,grids);            }        });    });    // 列改变时画出YZ方向所有Grids    signals.columnChanged.add(function (column) {        // for test        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getYZGrids.json',            data: { 'projectId': status.projectId, 'column':column},            dataType: 'json',            success: function (grids) {                gridHelper.drawYZGrids(gridsCanvas,grids);            }        });    });    signals.viewLayer.add(function () {        if(status.viewType == SystemStatus.ViewType.LAYER) {            resetCanvasHelper();        }        else{            setupCanvasHelper();        }    });    signals.viewRow.add(function () {        if(status.viewType == SystemStatus.ViewType.ROW) {            resetCanvasHelper();        }else{            setupCanvasHelper();        }    });    signals.viewColumn.add(function () {        if(status.viewType == SystemStatus.ViewType.COLUMN) {            resetCanvasHelper();        }else{            setupCanvasHelper()        }    });    return container;};