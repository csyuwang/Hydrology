var Viewport = function (editor) {    var signals = editor.signals;    // UI    var container = new EditorUI.Panel();    var canvasStyle = Config.Canvas.Style;    var canvas = new EditorUI.Canvas(canvasStyle.width,canvasStyle.height);    canvas.setBackgroundColor(canvasStyle.backgroundColor);    canvas.setPosition(canvasStyle.top,canvasStyle.left);    container.add(canvas);    // handle signals    signals.windowResize.add( function () {        canvas.setSize(window.innerHeight - 64,window.innerHeight - 64);        editor.gridHelper.canvasWidth = canvas.getOffsetWidth();        editor.gridHelper.canvasHeight = canvas.getOffsetHeight();    } );    signals.layerChanged.add(function (projectId,propertyType,layer) {        //alert(projectId+','+propertyType+','+layer);        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getBlocks.json',            data: { 'projectId': projectId,'propertyType': propertyType, 'layer':layer},            dataType: 'json',            success: function (blocks) {                var gridHelper = editor.gridHelper;                $.each(blocks, function (index,block) {                    drawBlock(canvas,block,gridHelper.grid2CanvasScaleX.bind(gridHelper),gridHelper.grid2CanvasScaleY.bind(gridHelper));                });            }        });    });    // 画网格    function drawXYGrid(canvas,grid,scaleX,scaleY) {        var ctx = canvas.getContext();        ctx.beginPath();        ctx.strokeStyle = "black";        ctx.lineWidth = 1;        $.each(grid.xCoordinates, function (index,gridX) {            var x = scaleX(gridX);            ctx.moveTo(x , 0);            ctx.lineTo(x , editor.gridHelper.canvasHeight);        });        $.each(grid.yCoordinates, function (index,gridY) {            var y = scaleY(gridY);            ctx.moveTo(0, y);            ctx.lineTo(editor.gridHelper.canvasWidth, y);        });        ctx.stroke();        ctx.closePath();    }    function drawBlock(canvas,block,scaleX,scaleY) {        var ctx = canvas.getContext();        if (block.color != "none" && block.color != undefined) {            ctx.fillStyle = block.color;            ctx.fillRect(scaleX(block.x),scaleY(block.y), scaleX(block.width), scaleY(block.height));        }    }    signals.projectChanged.add(function (projectId) {        $.ajax({            type: 'GET',            contentType: 'application/json',            url: '../getdata/getXYGrids.json',            data: { 'projectId': projectId },            dataType: 'json',            success: function (grid) {                var gridHelper = editor.gridHelper;                gridHelper.xCoordinates = grid.xCoordinates;                gridHelper.yCoordinates = grid.yCoordinates;                gridHelper.X_MAX = grid.x_max;                gridHelper.Y_MAX = grid.y_max;                drawXYGrid(canvas,grid,gridHelper.grid2CanvasScaleX.bind(gridHelper),gridHelper.grid2CanvasScaleY.bind(gridHelper));            }        });    } );    return container;};